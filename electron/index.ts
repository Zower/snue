import {ElectronBlocker} from '@cliqz/adblocker-electron';
import {app, BrowserWindow, ipcMain, session} from 'electron';
import fetch from 'node-fetch';
// const fetch = require('cross-fetch');
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1400,
    height: 1000,
    show: false,
    center: true,
    minWidth: 50,
    minHeight: 50,
    title: "SnUI",
    autoHideMenuBar: true,
    webPreferences: {
      webviewTag: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  ElectronBlocker.fromPrebuiltAdsAndTracking(fetch).then(blocker => {
    blocker.enableBlockingInSession(mainWindow.webContents.session);
  })

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Various handlers

  mainWindow.once('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.on('will-redirect', (e, url) => {
    if (url.includes("snuiredirect.com") && url.includes("code=")) {
      e.preventDefault()
      // For authorization redirects
      const after = url.split('http://snuiredirect.com/').slice(1).join("");
      mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY + after);
    }
  })

  ipcMain.on('fetch-url', (event, url) =>
    fetch(url, {redirect: "follow", follow: 100}).then(r => r.text())
      .then(t => event.reply(`fetch-text-ready-${url}`, {type: 'Success', text: t, url}))
      .catch(r => event.reply(`fetch-text-ready-${url}`, {type: "Error", error: r, url}))
  )
  // ipcMain.on(`imgur-urls-ready`, handler)
  ipcMain.on('fetch-imgur-urls', (event, albumId) =>
    fetch(`https://api.imgur.com/3/album/${albumId}/images`, {redirect: "follow", follow: 100, headers: {'Authorization': 'Client-ID dd66acbe06a2110'}})
      .then(r => r.json())
      .then(json => event.reply('imgur-urls-ready', (json as ImgurResponse).data.map(it => it.link)))
      .catch(r => {
        console.log(r);
        event.reply(`imgur-urls-ready`, ['https://i.imgur.com/removed.png'])
      })
  )
};

app.on('ready', createWindow);

app.on('window-all-closed', () => {
  app.quit();
});

interface ImgurResponse {
  data: {link: string}[];
}